--- ./system/include/emscripten/bind.h	2020-01-16 18:07:20.303153892 -0800
+++ ./system/include/emscripten/bind.h	2020-01-16 18:08:11.454199859 -0800
@@ -1062,7 +1062,7 @@
         };
     }

-    template<typename BaseClass>
+    template<typename BaseClass, bool isPoly=false>
     struct base {
         typedef BaseClass class_type;

@@ -1035,6 +1035,43 @@
         }
     };

+    template<typename BaseClass>
+    struct base<BaseClass, true> {
+
+        typedef BaseClass class_type;
+
+        template<typename ClassType>
+        static void verify() {
+            static_assert(!std::is_same<ClassType, BaseClass>::value, "Base must not have same type as class");
+            static_assert(std::is_base_of<BaseClass, ClassType>::value, "Derived class must derive from base");
+        }
+
+        static internal::TYPEID get() {
+            return internal::TypeID<BaseClass>::get();
+        }
+
+        template<typename ClassType>
+        using Upcaster = BaseClass* (*)(ClassType*);
+
+        template<typename ClassType>
+        using Downcaster = ClassType* (*)(BaseClass*);
+
+        template<typename ClassType>
+        static Upcaster<ClassType> getUpcaster() {
+            return &convertPointer<ClassType, BaseClass>;
+        }
+
+        template<typename ClassType>
+        static Downcaster<ClassType> getDowncaster() {
+            return &convertPointer<BaseClass, ClassType>;
+        }
+
+        template<typename From, typename To>
+        static To* convertPointer(From* ptr) {
+            return dynamic_cast<To*>(ptr);
+        }
+    };
+
     namespace internal {
         template<typename WrapperType>
         val wrapped_extend(const std::string& name, const val& properties) {
